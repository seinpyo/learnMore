## 문법
    - 엔티티 이름을 사용해야 함(테이블 이름 x)
    - 별칭 필수 (as는 생략 가능)
    - ex) select m from Member m where m.age > 18;

    - 집합, 정렬(SUM, AVG, MIN, MAX 등), GROUP BY, HAVING, ORDER BY 그대로 사용 가능

    - TypedQuery: 반환타입이 명확할 때 사용
    - Query: 반환타입이 명확하지 않을 때 사용

## 결과 조회 API
    - .getResult()
    - getSingleResult(): 결과가 없거나 둘 이상일 시 EXCEPTION 터짐. 결과가 정확히 하나일 경우에만 사용 가능

## 파라미터 바인딩
    - 이름 기준만 사용 권장
    ex) select m from Member m where m.username = :username
        query.setParameter("username", "아무개");

## 프로젝션
    - select 절에 조회할 대상을 지정하는 것
    - 대상 : 엔티티, 임베디드 타입, 스칼라타입(숫자, 문자 등 기본 데이터 타입)
    - SELECT m FROM Member m -> 엔티티 프로젝션
    - SELECT m.team FROM Member m -> 엔티티 프로젝션
    - SELECT m.address FROM Member m  -> 임베디드 타입 프로젝션
    - SELECT m.age, m.username FROM Member m -> 스칼라 타입 프로젝션
    # DISTINCT 로 중복 제거 가능

## 페이징
    - setFirstResult(int startPosition) : 조회 시작 위치      - setMaxResult(int maxResult) : 조회할 데이터 수
    - setMaxResult(int maxResult) : 조회할 데이터 수

## 조인
    - 내부조인
    - 외부조인
    - 세타조인: 연관관계가 전혀 없는 경우의 조인 = cross join

    - ON 절을 활용한 조인 :
        1) 조인대상 필터링 (연관 관계 필요)
        - JPQL : SELECT m, t FROM Member m LEFT JOIN m.team t ON t.name = 'A'
        => SQL : SELECT m.*, t.* FROM Member m LEFT JOIN Team t ON m.TEAM_ID = t.id AND t.name = 'A'

        2) 연관관계 없는 엔티티끼리 외부 조인 가능
        - JPQL : SELECT m,t FROM Member m LEFT JOIN Team t ON m.username = t.name
        - SQL : SELECT m.*, t.* FROM Member m LEFT JOIN Team t ON m.username = t.name

## 서브 쿼리
    - 지원하는 함수
        - [NOT] EXISTS : 서브쿼리에 결과가 존재하[지않으]면 참
        - ALL/ANY/SOME : 서브쿼리의 모든 결과 중에서 조건을 검색
        - [NOT] IN : 서브쿼리 결과 중 하나라도 같은 것이 있으면 참
    - JPA 는 WHERE, HAVING 절에서만 서브 쿼리 사용 가능
        - 하이버네이트에서 SELECT 절에서의 서브 쿼리를 지원함
    - FROM 절의 서브 쿼리는 현재 JPQL 에서 불가능
        => JOIN 으로 풀어서 해결

## 타입 표현
    - 문자: ' ' (작은 따옴표) 안에 문자 작성, ' 자체를 사용해야 한다면 '' (작은따옴표 두개) 사용
    - 숫자: 10L, 10D, 10F
    - ENUM: 패키지명을 포함한 ENUM 클래스 이름 ex) jpabook.MemberType.Admin
    - 엔티티 타입: TYPE(m) = Member (상속 관계에서 사용)
        - ITEM 의 자식 엔티티가 movie, book, album 이 있다고 할 때
        - "SELECT i FROM Item i WHERE TYPE(i) = Book"
            -> ITEM 의 DiscriminatorColumn 의 value(예제에서 DTYPE)가 'Book' 인 컬럼만 조회

## 조건식
    - CASE
        -기본 CASE: 조건
        -단순 CASE: 일치
        -COALESCE
        -NULLIF

## 기본 함수
    - JPA 표준 함수
        - CONCAT
        - SUBSTRING
        - TRIM
        - LOWER, UPPER
        - LENGTH
        - LOCATE
        - ABS, SQRT, MOD
        - SIZE, INDEX(JPA 용도)
    - MySQL57Dialect 같은 클래스에 db 종속적 함수들이 등록되어있음
    - 하이버 네이트는 사용전 방언에 추가해야한다
        : select function ('group_concat', i.name) from Item i



