
## 프록시
    - em.find(): DB를 통해 실제 엔티티 객체 조회
    - em.getReference(): DB 조회를 미루는 가짜(프록시) 엔티티 객체 조회
    - 특징
        * 실제 클래스를 상속 받아 만들어지고 실제 클래스와 겉 모양이 같다
            - 타입 체크 시 주의할 것 ( == 비교 대신 instance of 사용해야 함)
        * 처음 사용할 때 한 번만 초기화 된다
            - 프록시 객체를 초기화 할 때, 프록시 객체가 실제 엔티티로 바뀌는 것x, 프록시 객체를 통해 실제 엔티티에 접근 가능해 지는 것
        * 영속성 컨텍스트에 찾는 엔티티가 이미 있으면 em.getReference()를 호출해도 실제 엔티티로 반환된다.
        * 영속성 컨택스트의 도움을 받을 수 없는 준영속 상태 일 때 프록시를 초기화하면 LazyInitalizationException 예외 발생
    - 프록시 객체의 초기화
        Member member = em.getReference(Member.class, "id");    //프록시 생성됨
        member.getName();
            1. 호출 되면 생성된 프록시가 영속성 컨텍스트에 초기화를 요청.
            2. 영속성 컨텍스는 DB를 조회하여 실제 Entity 생성.
            3. 프록시가 실제 Entity에 target.getName(); 명령으로 실제 Entity의 name을 얻는다

## 프록시 확인
    - 프록시 인스턴스 초기화 여부 확인 = PersistenceUnitUtil.isLoaded(Object entity)
    - 프록시 클래스 확인 방법 = entity.getClass().getName()
    - 프록시 강제 초기화 = org.hibernate.Hibernate.initialize(entity);
    - cf) JPA 표준은 강제 초기화 없음 (강제 호출 : entity.getName());


## 즉시로딩(EAGER) vs 지연로딩(LAZY)
    - 가급적 지연 로딩만 사용할 것  (실무에서 즉시로딩 사용 X)
        - Member기 Team과 연관관계가있고 즉시 로딩으로 설정되어있다면 Member 호출 시 Member와 Team을 조인한 쿼리 발생
            -> 연관 관계가 많을수록 성능 저하
    - 즉시로딩은 JPQL에서 N+1 문제를 일으킨다
        -> 모든 연관관계를 지연로딩 설정하기, fetch 조인하기, 배치사이즈
    - @ManyToOne, @OneToOne은 기본이 즉시 로딩이므로 LAZY로 설정 필요
        - @OneToMany, @MAnyToMany는 기본이 지연로딩이다


## 영속성 전이: CASCADE
    - 특정 엔티티를 영속 상태로 만들 때 연관된 엔티티도 함께 영속 상태로 만들고 싶을 뗴 (부모 엔티티를 저장할 때 자식 엔티티도 함께 저장 )
    - 연관 관계를 매핑하는 것과 아무 관련도 없음
    - 엔티트를 영속화 할때 연관된 엔티티를 같이 영속해줄 뿐
    - 종류
        : ALL, PERSIST, REMOVE, MERGE, REFRESH, DETACH ( 거의 ALL, PERSIST 만 사용하게 됨)
    - 하나의 부모만 자식을 관리 할 때만 사용 (소유자가 하나 일 때, 자식 엔티티가 단일 엔티티에 완전히 종속적일 때, 라이프 사이클이 동일 혹은 유사할 때)

## 고아 객체
    - 부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제
    - orphanRemoval = true
    - 참조하는 곳이 하나일 때 사용해야함!! !! (특정 엔티티가 자식 엔티티를 개인 소요할 때 사용)
    - @OneToOne, @OneToMany 만 사용가능
    - cf) 개념적으로 부모를 제거하면 자식은 고아가됨 => 객체 제거 기능을 활성화 하면 부모를 제거할 때 자식도 함께 제거된다
        => CascadeType.REMOVE 처럼 동작 함 (당연하게도 ALL 도 똑같이 동작)

## 영속성 전이 + 고아 객체, 생명주기
    - CascadeType.All + orphanRemoval = true
    - 스스로 생명 주기를 관리하는 엔티티는 em.persist() 로 영속화, em.remove() 로 제거
    - 두 옵션을 모두 활성화하면 부모 엔티티를 통해 자식의 생명주기를 관리할 수 있다.
    - 도메인주도설계(DDD)의 aggregate root 개념을 구현할 때 유용

