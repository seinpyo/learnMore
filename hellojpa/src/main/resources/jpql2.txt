
## 경로 표현식
    - 점을 찍어 객체 그래프를 탐색
        select m.username -> 상대필드
        from Member m
            join m.team t -> 단일 값 연관 필드
            join m.orders o -> 컬렉션 값 연관필드
        where t.name = '팀A'
    - 상대 필드: 단순히 값을 저장하기 위한 필드
        : 경로 탐색의 끝, 이 뒤에 더 경로를 이을 수 x (m.username.abc 처럼 사용할 수 x)
    - 단일 값 연관 필드 : 연관 관계를 위한 필드 - 대상이 엔티티
        : 묵시적 내부 조인(inner join 발생), 탐색 o (m.team.name 처럼 사용 o)
    - 컬렉션 값 연관필드 : 연관 관계를 위한 필드 - 대상이 컬렉션)
        : 묵시적 내부 조인(inner join 발생), 탐색 x (상대 필드 처럼 더 이상 검색할 수 없다)
        : from 절에서 명시적 조인을 통해 별칭을 얻으면 별칭을 통해 탐색 가능


    !! 묵시적인 내부조인이 일어나지 않도록 쿼리를 짜는 것이 좋다

## 페치 조인
    !! 중요

    SQL 조인 종류가 아니고 JPQL에서 성능 최적화르 ㄹ위해 제공하는 기능이다
    연관된 엔티티나 컬렉션을 sql 한 번에 함께 조회하는 기능
    - join fetch 명령어 사용
        select m from Member m join fetch m.team
            = SELECT M.*, T.* FROM MEMBER M INNER JOIN TEAM T ON M.TEAM_ID = T.ID

    -페치 조인 vs 일반 조인
        : 일반 조인 실행 시 연관된 엔티티를 함께 조회하지 않음
            -> [jpql] select t from Team join t.members m where t.name = '팀A' (팀 엔티티만 조회하고 회원 엔티티는 조회 X)
                = [sql] SELECT T.* FROM TEAM T INNER JOIN MEMBER M ON T.ID = TEAM_ID WHERE T.NAME = '팀A'
        : 페치 조인을 사용하면 연관된 엔티티도 함께 조회(즉시 로딩)
            - 객체 그래프를 SQL 한번에 조회하는 개념
            -> [jpql] select t from Team t join fetch t.members where t.name = '팀A'
                = [sql] SELECT T.*, M.* FROM TEAM T INNER JOIN MEMBER M ON T.ID = M.TEAM_ID WHERE T.NAME = '팀A'